// functionObjects
functions
{
    // **************************************************** //
    // **** coded functionObject for bubble processing **** //
    // **************************************************** //
    bubblepproc
    {
        // Load the library containing the 'coded' functionObject
        libs ("libutilityFunctionObjects.so");
        type coded;
        writeControl    timeStep; //adjustableRunTime;
        writeInterval   1; //0.002;
        // Name of on-the-fly generated functionObject
        name bubblepproc;
        // List of include search directories
        codeOptions
        #{
            -I$(LIB_SRC)/sampling/lnInclude \
            -I$(LIB_SRC)/dynamicMesh/lnInclude \
            -I$(LIB_SRC)/surfMesh/lnInclude
        #};
        // List of libraries to link with
        codeLibs
        #{
            -lsampling \
            -ldynamicMesh \
            -lsurfMesh
        #};
        // List of include files
        codeInclude
        #{
            #include "sampledIsoSurface.H"
            #include "vtkSurfaceWriter.H"
        #};
        // Code
        codeWrite
        #{
            //Info << "----------bubblepproc----------" << endl;

            // Lookup velocity field U
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");

            // Lookup liquid fraction alpha_liquid
            const volScalarField& alphaLiquid = mesh().lookupObject<volScalarField>("alpha.water");

            // Compute weight (= gas fraction)
            volScalarField weight
            (
                IOobject
                (
                    "weight",
                    mesh().time().timeName(),
                    U.mesh(),
                    IOobject::NO_READ,
                    IOobject::NO_WRITE
                ),
                alphaLiquid //(1-alphaLiquid)
            );

            // Compute isosurface alpha=0.5
            dictionary isoSurfDict;
            isoSurfDict.add("type","isoSurface");
            isoSurfDict.add("isoField","alpha.water");
            isoSurfDict.add("isoValue",0.5);
            isoSurfDict.add("regularise","diagcell");
            sampledIsoSurface isoInterface("isoInterface", mesh(), isoSurfDict);
            isoInterface.update();

            // Debug output of isosurface in vtk format
            if ( mesh().time().writeTime() && false )
            {
              // Create output file name and directory
              const fileName outputPath(mesh().time().globalPath()/functionObject::outputPrefix/"bubblepproc_DEBUG"/mesh().time().timeName());
              mkDir(outputPath);
              const fileName outputName(outputPath/isoInterface.name());
              Info << "Writing debug surface: " << outputName << nl;
              // Write file in vtk format
              bool parallel = Pstream::parRun();
              dictionary vtkWriterOptions;
              vtkWriterOptions.add("format","ascii");
              surfaceWriters::vtkWriter writerDebug(isoInterface,outputName,parallel,vtkWriterOptions);
              writerDebug.write();
            }

            // Compute bubble volume
            dimensionedScalar bubbleVolume = fvc::domainIntegrate(weight); // This is integral of "weight" over the volume
            //Info << "bubble volume     = " << bubbleVolume.value() << endl;

            // Compute bubble area
            dimensionedScalar bubbleArea = isoInterface.area();
            //Info << "bubble area       = " << bubbleArea.value() << endl;

            // Compute bubble center
            dimensionedVector Cb = fvc::domainIntegrate(weight*mesh().C())/bubbleVolume;
            //Info << "bubble centroid   = " << Cb.value() << endl;

            // Compute rising velocity
            dimensionedVector Ub = fvc::domainIntegrate(weight*U)/bubbleVolume;
            //Info << "bubble velocity   = " << Ub.value() << endl;

            // Compute radius of volume equivalent sphere (from bubble volume)
            dimensionedScalar radiusA = pow(3.0/4.0/constant::mathematical::pi*bubbleVolume, 1.0/3.0);
            //Info << "bubble diameter A = " << radiusA.value()*2.0 << endl;

            // Compute radius of bubble (from bubble surface)
            dimensionedScalar radiusB = sqrt(bubbleArea/constant::mathematical::pi/4.0);
            //Info << "bubble diameter B = " << radiusB.value()*2.0 << endl;

            // Compute degree of sphericity
            /*if ( radiusB.value() != 0.0 )
            Info << "bubble sphericity = " << pow(radiusA.value()/radiusB.value(),2) << endl;*/
            dimensionedScalar bubbleSphericity = pow(radiusA.value()/radiusB.value(),2);
            
            if(Pstream::master())
            {
            	fileName outputFile = ("./bubblepproc.dat");
            	autoPtr<OFstream> outputFilePtr;
            	
            	if (!exists(outputFile))
            	{
            		OFstream is(outputFile);
            		outputFilePtr.reset(new OFstream(outputFile));
            		outputFilePtr() << "time" << tab
            		            	<< "magVelocity" << tab
            				<< "x-Velocity" << tab
            				<< "y-Velocity" << tab
            				<< "z-Velocity" << tab 
            				<< "bubbleVolume" << tab 
            				<< "bubbleArea" << tab 
            				<< "bubbleCenterx" << tab
            				<< "bubbleCentery" << tab
            				<< "bubbleCenterz" << tab
            				<< "radiusA" << tab
            				<< "radiusB" << tab
            				<< "sphericity" 
            				<< endl;
            		outputFilePtr() << 0 << tab 
            		            	<< mag(Ub).value() << tab
            				<< Ub.value().x() << tab
            				<< Ub.value().y() << tab
            				<< Ub.value().z() << tab
            				<< bubbleVolume.value() << tab 
            				<< bubbleArea.value() << tab 
            				<< Cb.value().x() << tab
            				<< Cb.value().y() << tab
            				<< Cb.value().z() << tab
            				<< radiusA.value() << tab
            				<< radiusB.value() << tab
            				<< bubbleSphericity.value() 
            				<< endl;            				
            	}
            	
            	outputFilePtr.reset(new OFstream(outputFile,IOstreamOption(),IOstreamOption::APPEND));
            		outputFilePtr() << mesh().time().timeName() << tab 
            		            	<< mag(Ub).value() << tab
            				<< Ub.value().x() << tab
            				<< Ub.value().y() << tab
            				<< Ub.value().z() << tab
            				<< bubbleVolume.value() << tab 
            				<< bubbleArea.value() << tab 
            				<< Cb.value().x() << tab
            				<< Cb.value().y() << tab
            				<< Cb.value().z() << tab
            				<< radiusA.value() << tab
            				<< radiusB.value() << tab
            				<< bubbleSphericity.value() 
            				<< endl;  
            }

    	     
            //Info << "----------bubblepproc----------\n" << endl;

        #};
    }

    // ********************************************************** //
    // **** sample functionObject for extracting isosurfaces **** //
    // ********************************************************** //
    isosurfaces
    {
        type            surfaces;
        libs ("libsampling.so");
        writeControl    timeStep;
        writeInterval   1;//0.01;

        surfaceFormat   vtk;
        fields          ( p U );

        // interpolationScheme. choice of
        //      cell          : use cell-centre value only; constant over cells (default)
        //      cellPoint     : use cell-centre and vertex values
        //      cellPointFace : use cell-centre, vertex and face values.
        //      pointMVC      : use point values only (Mean Value Coordinates)
        //      cellPatchConstrained : like 'cell' but uses cell-centre except on
        //                             boundary faces where it uses the boundary value.
        //      cellPointWallModified: like 'cell' but uses cell-centre except on
        //                             walls faces where it uses the wall value.
        interpolationScheme cellPointFace;

        // Surface sampling definition
        //
        // 1] patches are not triangulated by default
        // 2] planes are always triangulated
        // 3] iso-surfaces are always triangulated
        surfaces
        (
          constantIso
          {
              // Iso surface for constant values.
              // Triangles guaranteed not to cross cells.
              type            isoSurface;
              isoField        alpha.water;
              isoValue        0.5;
              interpolate     false;
              regularise      true;
          }
        );
    }
}
